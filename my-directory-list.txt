The file parser contains:
import os
import psycopg2
import sys
import re
import chardet

directory = sys.argv[1]

def main():
    print('main before function')
    readDirectory(directory)


def readDirectory(directory):
    print('directory = ' + directory)
    print('directory (absolute) = ' + os.path.abspath(directory))

    for root, subdirs, files in os.walk(directory):
        print('--\nroot = ' + root)
        list_file_path = os.path.join(root, 'my-directory-list.txt')
        print('list_file_path = ' + list_file_path)

        with open(list_file_path, 'wb') as list_file:
            for subdir in subdirs:
                print('\t- subdirectory ' + subdir)

            for filename in files:
                file_path = os.path.join(root, filename)

                print('\t- file %s (full path: %s)' % (filename, file_path))

                with open(file_path, 'rb') as f:
                    f_content = f.read()
                    list_file.write(('The file %s contains:\n' % filename).encode('utf-8'))
                    list_file.write(f_content)
                    list_file.write(b'\n')


def readfile(filename):
    with open(filename) as f:
        for line in f:
            parse(line)

def checkmailorlogin(world):
    EMAIL_REGEX = re.compile(r"[^@]+@[^@]+\.[^@]+")
    if not EMAIL_REGEX.match(world):
        return 0
    else:
        return 1

def parse(line):
    world = line.split(':')
    conn = connectdatabase()
    if ( checkmailorlogin(world[0]) == 1 ):
        insertuser(conn, "", world[0])
    else:
        insertuser(conn, world[0], "")
    insertpassword(conn, world[1])

def insertuser(conn, entrylogin, entrymail):
    cur = conn.cursor()
    cur.execute("INSERT INTO t_user (id_user, login, mail) \
          VALUES (, %s, %s)", (entrylogin, entrymail));
    conn.commit()
    print("Insert Success")

def insertpassword(conn, entrypass):
    cur = conn.cursor()
    cur.execute("INSERT INTO password (id_password, password) \
          VALUES (, %s)", (entrypass));
    conn.commit()
    print("Insert Success")

def checkentry(conn):
    outputpasswords(conn)
    outputusers(conn)

def connectdatabase():
    conn = psycopg2.connect(database="dbpassword", user="mypguser", password="", host="127.0.0.1", port="5432")
    print("Database Connected....")
    return conn

def decodatabase(conn):
    conn.close()

def outputpasswords(conn):
    cur = conn.cursor()
    cur.execute("SELECT id_password, password from t_password")
    print("ID   password ")
    print("--------------")
    rows = cur.fetchall()
    for row in rows:
        print(row[0], ' ', str(row[1]).strip())
    decodatabase(conn)

def outputusers(conn):
    cur = conn.cursor()
    cur.execute("SELECT id_user, login, email from t_user")
    print("ID   name email  ")
    print("--------------")
    rows = cur.fetchall()
    for row in rows:
        print(row[0], ' ', str(row[1]).strip())
    decodatabase(conn)

if __name__== "__main__":
    main()
The file my-directory-list.txt contains:

The file .gitignore contains:
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/

The file pythontest contains:
import os
import sys

walk_dir = sys.argv[1]

print('walk_dir = ' + walk_dir)
print('walk_dir (absolute) = ' + os.path.abspath(walk_dir))

for root, subdirs, files in os.walk(walk_dir):
    print('--\nroot = ' + root)
    list_file_path = os.path.join(root, 'my-directory-list.txt')
    print('list_file_path = ' + list_file_path)

    with open(list_file_path, 'wb') as list_file:
        for subdir in subdirs:
            print('\t- subdirectory ' + subdir)

        for filename in files:
            file_path = os.path.join(root, filename)

            print('\t- file %s (full path: %s)' % (filename, file_path))

            with open(file_path, 'rb') as f:
                f_content = f.read()
                list_file.write(('The file %s contains:\n' % filename).encode('utf-8'))
                list_file.write(f_content)
                list_file.write(b'\n')
